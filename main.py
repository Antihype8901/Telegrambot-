# import sqlite3
import random
import telebot
from telebot import types
from telegram.ext import Filters, MessageHandler
from datetime import datetime

bot = telebot.TeleBot('5418327966:AAGxElFTKrdmp3xPZRtc7K2U_lM12k0aZ4w')
# work with bd(sqlite3)
# db=sqlite3.connect('bdfortelegrambot.db')
# sql=db.cursor()
#
# sql.execute("""CREATE TABLE IF NOT EXISTS users (
#     user TEXT,
#     activities TEXT,
#     timeeveryact TimeOnly,
#     usertime TimeOnly,
#     nowday DateOnly)
# """)
# db.commit()




# –†–∞–∑–¥–µ–ª "–ü—Ä–∞–≤–∫–∏":
# everytime when user adresses to bot, bot ask what time is the user? –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, –æ–¥–∏–Ω —Ä–∞–∑ —Å–ø—Ä–æ—Å–∏—Ç—å –∏ –±–æ–ª—å—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª, –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å –µ–º—É —É–∂–µ –¥—Ä—É–≥–æ–µ –º–µ–Ω—é.


listwithhistory = []
listwithtime = []
# Tuple —Å id —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
tupleidwithhi = ("CAACAgIAAxkBAAEFgsxi8jvdFzie2yebk6UtTpnl4t8VtgACNwADO2AkFJKJczNcKY76KQQ",
                 "CAACAgIAAxkBAAEFgspi8jvXwznpHZin12nhkFM1YIjA6gAC_AAD9wLID-JKwmellSruKQQ",
                 "CAACAgEAAxkBAAEFgshi8jvOfZFo8QABAWJyAzRKXIMmtusAAg8BAAI4DoIRtcxNf-IUkYIpBA"
                 , "CAACAgIAAxkBAAEFgsZi8jvHbwrlx3pS0ZBbAAH6FOnItF4AAp0AA-SgzgcAARSfeXjUPckpBA"
                 , "CAACAgIAAxkBAAEFgsRi8jvAXjqL6jwuzQbxYGpM74W5hgACxgEAAhZCawpKI9T0ydt5RykE"
                 , "CAACAgIAAxkBAAEFgsJi8ju4GdrrmyTmkN802kEfV9pyxQACHAAD9wLID3Acci1tkxh4KQQ"
                 , "CAACAgIAAxkBAAEFgsBi8juu06jbcQHe0BEE86JrGWCJMwACuQ0AAhRxwEvJIHUkgc_B3SkE"
                 , "CAACAgIAAxkBAAEFNeZixq7TKNMbZY6VHdndgHSvZM6RegACEhEAAj9w8Uo66W_N-9GmTykE")

# –ö–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –∫–æ–Ω–µ—Ü –∑–∞–ø–∏—Å–∏ –æ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
endtuple = ('–∫–æ–Ω–µ—Ü', 'rjytw', '–∫–ª–Ω–µ—Ü', 'end', 'rjy', 'rjytw')
startbool = False
# choicekindrecord –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –∑–∞–ø–∏—Å—å –¥–µ–ª–∞ + –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–ª–∞
choicekindrecord = True
timeuser =''
# user's chance (today or tommorow).True-today, False-tommorow
choiceday=False
# –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ—Ç –±–æ—Ç–∞
# """–≠–ª–µ–º–µ–Ω—Ç—ã zapis –±–µ—Ä—É—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ–∏ –¥–µ–ª–∞(–¢–µ–º —Å–∞–º—ã–º –±–æ—Ç —Å –Ω–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç.)  """
zapis = (
    '—Ç–∞–∫-—Ç–∞–∫', '–Ø –∑–∞–ø–∏—Å—ã–≤–∞—é', '–ù–∞–¥–µ—é—Å—å —ç—Ç–æ –≤—Å—ë)–Ø —à—É—á—É', '–•–æ—Ä–æ—à–æ', '–ó–∞–ø–∏—Å–∞–ª', '–ü—Ä–∏–Ω—è–ª', '–Ø –∑–∞–ø–æ–º–Ω–∏–ª', '–¢–∞–∫-—Å',
    'yes, sir',
    '–û–≥–æ', '–•–æ—Ä–æ—à–æ–µ –¥–µ–ª–æ', '–î–∞ —É–∂–∂–∂–∂–∂', '–í–æ—Ç —Ç–µ –Ω–∞', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–µ–Ω—å–∫–æ', '–ü—Ä–∏–∫–æ–ª—å–Ω–æ')

"""–≠–ª–µ–º–µ–Ω—Ç—ã endzapis –±–µ—Ä—É—Ç—Å—è –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –¥–µ–ª–∞."""
endzapis = ('–ê —Ç—ã —Ö–æ—Ä–æ—à.', '–í–æ—Ç —ç—Ç–æ –¥–∞!–ù–∞–ø–æ–ª–µ–æ–Ω–æ–≤—Å–∫–∏–µ –ø–ª–∞–Ω—ã —É —Ç–µ–±—è. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!', '–•–æ—Ä–æ—à–∏–π –ø–ª–∞–Ω!–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!',
            '–£–¥–∞—á–∏ —Ç–µ–±–µ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏!',
            '–ù–µ –≤–∞–∂–Ω–æ, –∫–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n–°–¥–µ–ª–∞–π –ø–æ –º–∞–∫—Å–∏–º—É–º—É –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª,',
            ' –∏ —Ç—ã –±—É–¥–µ—à—å –≥–æ—Ä–¥–∏—Ç—å—Å—è —Å–æ–±–æ–π.', '"–°–æ–∑–¥–∞–π —à–µ–¥–µ–≤—Ä –∏–∑ —Å–µ–≥–æ–¥–Ω—è".\n-–î–∂–æ–Ω –í—É–¥–µ–Ω.\n'
            , '–ë–¥–µ—Å—Ç—è—â–∏–π —É —Ç–µ–±—è –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å!\n–°–¥–µ–ª–∞–π –µ–≥–æ –ø–æ –∫—Ä–∞—Å–æ—Ç–µ.')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É
def checkstr(string):
    return isinstance(string, str)


@bot.message_handler(commands=["/start"])
def start(m):
    global startbool
    startbool = True
    choicekindrecord = True
    chektime = False

    bot.send_message(m.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {m.chat.first_name} {m.chat.last_name}.\n'
                                f'–Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –µ—Å–ª–∏ —Ç—ã –≤–¥—Ä—É–≥ –∑–∞–±—ã–ª(–∞).\n'
                                f'–ú–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –º–µ–Ω—è —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –¥–µ–ª.')

    # TODO: 2-–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–ø—Ä–∞—â–∏–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–π—á–∞—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è +
    # TODO: 3-+ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–¥–æ–± –≤ –±–¥), —Ç–æ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤
    # –µ–º—É –µ–≥–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ —Å–Ω–∏–∑—É –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    # TODO: 4-add change language beta (–ø–æ–∫–∞ –Ω–µ –Ω—É–∂–¥–∞—é—Å—å ) +
    # TODO: 1-–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä: –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –¥–µ–ª –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –∫–∞–∂–¥–æ–µ –¥–µ–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ +
    # TODO: 5-–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–¥
    # TODO: 6-–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–¥
    # TODO: 8-–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–¥
    bot.send_sticker(m.chat.id, tupleidwithhi[random.randint(0, len(tupleidwithhi) - 1)])
    choice_how_record(m)

bot.dispatcher.add_handler(MessageHandler(Filters.text=="/start", start))

@bot.message_handler()
def user_message(message):
    if not (startbool):
        start(message)
    if checkstr(message.text):
        if message.text == "/start":
            start(message)
            return
        if message.text == "–°–µ–≥–æ–¥–Ω—è üìñ" or message.text == "–ó–∞–≤—Ç—Ä–∞ üïò":
            bot.send_message(message.chat.id, 'üåµ–°—É–ø–µ—Ä.')
            listwithhistory.append(message.text)
            # TODO: –∑–¥–µ—Å—å –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            mes = bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ —Å–ø–∏—Å–æ–∫ –¥–µ–ª (–æ–¥–Ω–æ –¥–µ–ª–æ = –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞):")
        else:
            mes = bot.send_message(message.chat.id, zapis[random.randint(0, len(zapis) - 1)])
        bot.register_next_step_handler(mes, userobrab)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤ –≤–µ–¥—ë–Ω–Ω–æ–π –≤–∞–º–∏ —Å—Ç—Ä–æ–∫–µ!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —Å—Ç—Ä–æ–∫—É.")


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è
def chektimefunc(message):

    global chektime
    chektime = False
    timetemp = message.text
    timenow=datetime.now().strftime("%H/%M")

    if (len(timetemp) <= 5):
        if (timetemp[1:2] == "/" or timetemp[2:3] == "/"):
            if len(timetemp) == 4:
                if (int(timetemp[:1]) < 24 and int(timetemp[3:5]) < 60):
                    chektime = True
            else:
                if (int(timetemp[:2]) < 24 and int(timetemp[3:5]) < 60):
                    chektime = True
    thechoicedayuser(message)


# """–î–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–≤–µ –∫–Ω–æ–ø–∫–∏.(–∑–∞–ø–∏—Å—å —Å –≤—Ä–µ–º–µ–Ω/ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ )"""
def choice_how_record(m):
    markup = types.InlineKeyboardMarkup()
    # TODO: –ó–¥–µ—Å—å –Ω–µ –æ—á –Ω—Ä–∞–≤–∏—Ç—Å—è –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω —Ç–µ–∫—Å—Ç, –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å.
    text = "–í—ã–±–µ—Ä–µ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å.\n" \
           "1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∂–¥–æ–µ –¥–µ–ª–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.\n" \
           "2. –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–µ–ª –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
    item_with_time = types.InlineKeyboardButton(text="–•–æ—á—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏.", callback_data='withtime')
    item_without_time = types.InlineKeyboardButton(text="–•–æ—á—É —Å–ø–∏—Å–æ–∫–æ–º.", callback_data='notime')

    markup.add(item_with_time, item_without_time)
    bot.send_message(m.chat.id, text, reply_markup=markup)


# –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏ —Ä–∞–±–æ—Ç–∞–µ–º –∑–¥–µ—Å—å
@bot.callback_query_handler(func=lambda call: True)
# """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ choice_how_record. –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä."""
def answerontimerecordandchoiceday(call):
    global choicekindrecord
    if call.data == "notime":
        choicekindrecord = False
    time = bot.send_message(call.message.chat.id, '–ö—Ä—É—Ç–æüëç–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å.\n'
                                                  '\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å —É –≤–∞—Å –≤—Ä–µ–º–µ–Ω–∏.–í —Ñ–æ—Ä–º–∞—Ç–µ HH/MM\n\n(–∫–æ–ª-–≤–æ —á–∞—Å–æ–≤/–∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç)\n(–ü—Ä–∏–º–µ—Ä: 8/01 –∏–ª–∏ 11/19).')
    bot.register_next_step_handler(time, chektimefunc)


def thechoicedayuser(message):
    global timeuser
    if chektime:
        timeuser = message.text
        menumain = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        itemmaintoday = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è üìñ')
        itemmaintommorow = types.KeyboardButton('–ó–∞–≤—Ç—Ä–∞ üïò')
        menumain.add(itemmaintoday, itemmaintommorow)
        temm = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏, –Ω–∞ –∫–∞–∫–æ–π –∏–∑ –¥–Ω–µ–π, —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–∞.",
                                reply_markup=menumain)
        bot.register_next_step_handler(temm, user_message)
    else:
        mes = bot.send_message(message.chat.id,
                               '–í—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n(–∫–æ–ª-–≤–æ —á–∞—Å–æ–≤/–∫–æ–ª-–≤–æ –º–∏–Ω—É—Ç)')
        bot.register_next_step_handler(mes, chektimefunc)




def userobrabtime(message):
    listwithtime.append(message.text)
    mess = bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ! –ó–∞–ø–∏—Å–∞–ª.\n–î–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–ª–æ.')
    bot.register_next_step_handler(mess, userobrab)


# handler records
def userobrab(mesg):
    if checkstr(mesg.text):
        if not (mesg.text.lower() in endtuple):
            listwithhistory.append(mesg.text)
            if choicekindrecord:
                time = bot.send_message(mesg.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è(–≤–æ —Å–∫–æ–ª—å–∫–æ –¥–µ–ª–æ)')
                bot.register_next_step_handler(time, userobrabtime)
            else:
                user_message(mesg)
        else:
            bot.send_message(mesg.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ.\n–ó–∞–ø–∏—Å—å –æ–∫–æ–Ω—á–µ–Ω–∞!')
            printhistory(mesg)
    else:
        bot.send_message(mesg.chat.id, '–û—à–∏–±–∫–∞! –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫—É.')


def printhistory(re):
    if listwithhistory[0] == "–°–µ–≥–æ–¥–Ω—è üìñ":
        bot.send_message(re.chat.id, '–°–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –¥–µ–ª:')
    else:
        bot.send_message(re.chat.id, '–í–∞—à–∏ –¥–µ–ª–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:')
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, + –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –∫ –∫–∞–∂–¥–æ–º—É –¥–µ–ª—É
    textmain = ''
    for el in range(1, len(listwithhistory)):
        textmain += f"{el})" + listwithhistory[el] + '\n'
    if len(listwithhistory) != 0:
        if not (choicekindrecord):
            mes = bot.send_message(re.chat.id,
                                   '–í–æ —Å–∫–æ–ª—å–∫–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏, —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n —Å –≤–∞—à–∏–º–∏ –¥–µ–ª–∞–º–∏.')
            bot.register_next_step_handler(mes, )
        else:
            bot.send_message(re.chat.id, f" {textmain}")
            bot.send_sticker(re.chat.id, 'CAACAgIAAxkBAAEFRrVi0DdErwLlhVDmuUeTdGT-Ld0khQAC2w8AAjs_SUvTm6YwUBI-OCkE')
    else:
        bot.send_message(re.chat.id, "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–µ–ª –ø–æ–∫–∞ –ø—É—Å—Ç!")


if __name__ == "__main__":
    bot.polling()
